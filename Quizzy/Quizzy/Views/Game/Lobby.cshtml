@{
    Layout = "_Layout";
    var pin = (string)(ViewData["Pin"] ?? "");
    ViewData["Title"] = "Quizzy Lobby";
}
<main class="container">
    <h1>Quiz Lobby</h1>
    <div class="alert alert-info">
        <strong>Session Code:</strong>
        <span id="sessionPin">@pin</span>
        <button id="copyPin" class="btn btn-sm btn-outline-secondary">Copy</button>
        <div class="small text-muted">Players join via <code>/Player</code> and enter this code.</div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h4>Players Joined (<span id="playerCount">0</span>)</h4>
            <ul id="playerList" class="list-group"></ul>
        </div>
        <div class="col-md-6">
            <h4>Controls</h4>
            <div class="d-flex gap-2 mb-3">
                <button id="startNowBtn" class="btn btn-primary" disabled>Start Next Question Now</button>
                <button id="scheduleBtn" class="btn btn-outline-secondary" disabled>Schedule in 5s</button>
            </div>
            <div id="status" class="text-muted">Waiting for players…</div>

            <style>
                .countdown-overlay {
                    position: fixed;
                    inset: 0;
                    background: rgba(0,0,0,0.85);
                    display: none;
                    align-items: center;
                    justify-content: center;
                    z-index: 9999;
                }

                .countdown-number {
                    font-size: clamp(80px, 20vw, 240px);
                    color: #fff;
                    font-weight: 800;
                    line-height: 1;
                    animation: pop 1s ease-out infinite;
                    text-shadow: 0 8px 30px rgba(0,0,0,0.5);
                }

                @@keyframes pop {
                    0% {
                        transform: scale(0.6);
                        opacity: 0.6;
                    }

                    50% {
                        transform: scale(1.1);
                        opacity: 1;
                    }

                    100% {
                        transform: scale(1.0);
                        opacity: 0.9;
                    }
                }
            </style>

            <div id="hostCountdownOverlay" class="countdown-overlay">
                <div id="hostCountdownNumber" class="countdown-number">3</div>
            </div>

        </div>
    </div>
</main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"></script>
<script>
    (function(){
      const pin = document.getElementById('sessionPin').textContent.trim();
      const copyBtn = document.getElementById('copyPin');
      const playerList = document.getElementById('playerList');
      const playerCount = document.getElementById('playerCount');
      const statusEl = document.getElementById('status');
      const startNowBtn = document.getElementById('startNowBtn');
      const scheduleBtn = document.getElementById('scheduleBtn');

      copyBtn.addEventListener('click', async ()=>{
        await navigator.clipboard.writeText(pin);
        copyBtn.textContent='Copied!';
        setTimeout(()=>copyBtn.textContent='Copy', 1200);
      });

      const conn = new signalR.HubConnectionBuilder().withUrl("/gamehub").withAutomaticReconnect().build();
      conn.on('SessionStateUpdated', (state)=>{
        playerCount.textContent = state.players.length;
        playerList.innerHTML = '';
        (state.players||[]).forEach(p => {
          const li = document.createElement('li');
          li.className='list-group-item d-flex justify-content-between align-items-center';
          li.textContent = p.name;
          const badge = document.createElement('span');
          badge.className = 'badge bg-secondary rounded-pill';
          badge.textContent = p.score ?? 0;
          li.appendChild(badge);
          playerList.appendChild(li);
        });
        statusEl.textContent = state.question ? 'Question live' : 'Waiting to start…';
        startNowBtn.disabled = false; scheduleBtn.disabled = false;
      });

      conn.start().then(async ()=>{
        await conn.invoke('ClaimHost', pin);
      }).catch(err => { statusEl.textContent = 'Connection error: ' + (err?.message||err); });

      startNowBtn.addEventListener('click', async () => {
        await conn.invoke('ScheduleNextQuestion', pin, 3);
      });
      scheduleBtn.addEventListener('click', async ()=>{
        await conn.invoke('ScheduleNextQuestion', pin, 5);
      });
    })();
</script>
